#include "display.h"

#include <avr/io.h>
#include <util/delay.h>

void Display::initialize(Orientation orientation)
{
    if (orientation == Orientation::PORTRAIT) {
        shape_.width = 480;
        shape_.height = 800;
    } else {
        shape_.width = 800;
        shape_.height = 480;
    }

    // MAUCCTR: Manufacture Command Set
    command(0xf000, 0x55);
    command(0xf001, 0xaa);
    command(0xf002, 0x52);
    command(0xf003, 0x08); // enable page 1
    command(0xf004, 0x01);
    // BT1CTR: BT1 Power Control for AVDD
    command(0xb600, 0x34);
    command(0xb601, 0x34);
    command(0xb602, 0x34);
    // SETAVDD: Setting AVDD Voltage
    command(0xb000, 0x0d);
    command(0xb001, 0x0d);
    command(0xb002, 0x0d);
    // BT2CTR: BT2 Power Control for AVEE
    command(0xb700, 0x24);
    command(0xb701, 0x24);
    command(0xb702, 0x24);
    // SETAVEE: Setting AVEE Voltage
    command(0xb100, 0x0d);
    command(0xb101, 0x0d);
    command(0xb102, 0x0d);
    // BT3CTR: BT3 Power Control for VCL
    command(0xb800, 0x24);
    command(0xb801, 0x24);
    command(0xb802, 0x24);
    // SETVCL: Setting VCL Voltage
    command(0xb200, 0x00);
    // BT4CTR: BT4 Power Control for VGH
    command(0xb900, 0x24);
    command(0xb901, 0x24);
    command(0xb902, 0x24);
    // DPCKRGB: Display Clock in RGB Interface
    command(0xb300, 0x05);
    command(0xb301, 0x05);
    command(0xb302, 0x05);
    // BT5CTR: BT5 Power Control for VGLX
    command(0xba00, 0x34);
    command(0xba01, 0x34);
    command(0xba02, 0x34);
    // DPRSLCTR: Display Resolution Control
    command(0xb500, 0x0b);
    command(0xb501, 0x0b);
    command(0xb502, 0x0b);
    // SETVGP: Setting VGMP and VGSP Voltage
    command(0xbc00, 0x00);
    command(0xbc01, 0xa3);
    command(0xbc02, 0x00);
    // SETVGN: Setting VGMN and VGSN Voltage
    command(0xbd00, 0x00);
    command(0xbd01, 0xa3);
    command(0xbd02, 0x00);
    // SETVCMOFF: Setting VCOM Offset Voltage
    command(0xbe00, 0x00);
    command(0xbe01, 0x63);
    // GMRCTR1: Setting Gamma 2.2 Correction for Red (Positive)
    command(0xd100, 0x00);
    command(0xd101, 0x37);
    command(0xd102, 0x00);
    command(0xd103, 0x52);
    command(0xd104, 0x00);
    command(0xd105, 0x7b);
    command(0xd106, 0x00);
    command(0xd107, 0x99);
    command(0xd108, 0x00);
    command(0xd109, 0xb1);
    command(0xd10a, 0x00);
    command(0xd10b, 0xd2);
    command(0xd10c, 0x00);
    command(0xd10d, 0xf6);
    command(0xd10e, 0x01);
    command(0xd10f, 0x27);
    command(0xd110, 0x01);
    command(0xd111, 0x4e);
    command(0xd112, 0x01);
    command(0xd113, 0x8c);
    command(0xd114, 0x01);
    command(0xd115, 0xbe);
    command(0xd116, 0x02);
    command(0xd117, 0x0b);
    command(0xd118, 0x02);
    command(0xd119, 0x48);
    command(0xd11a, 0x02);
    command(0xd11b, 0x4a);
    command(0xd11c, 0x02);
    command(0xd11d, 0x7e);
    command(0xd11e, 0x02);
    command(0xd11f, 0xbc);
    command(0xd120, 0x02);
    command(0xd121, 0xe1);
    command(0xd122, 0x03);
    command(0xd123, 0x10);
    command(0xd124, 0x03);
    command(0xd125, 0x31);
    command(0xd126, 0x03);
    command(0xd127, 0x5a);
    command(0xd128, 0x03);
    command(0xd129, 0x73);
    command(0xd12a, 0x03);
    command(0xd12b, 0x94);
    command(0xd12c, 0x03);
    command(0xd12d, 0x9f);
    command(0xd12e, 0x03);
    command(0xd12f, 0xb3);
    command(0xd130, 0x03);
    command(0xd131, 0xb9);
    command(0xd132, 0x03);
    command(0xd133, 0xc1);
    // GMGCTR1: Setting Gamma 2.2 Correction for Green (Positive)
    command(0xd200, 0x00);
    command(0xd201, 0x37);
    command(0xd202, 0x00);
    command(0xd203, 0x52);
    command(0xd204, 0x00);
    command(0xd205, 0x7b);
    command(0xd206, 0x00);
    command(0xd207, 0x99);
    command(0xd208, 0x00);
    command(0xd209, 0xb1);
    command(0xd20a, 0x00);
    command(0xd20b, 0xd2);
    command(0xd20c, 0x00);
    command(0xd20d, 0xf6);
    command(0xd20e, 0x01);
    command(0xd20f, 0x27);
    command(0xd210, 0x01);
    command(0xd211, 0x4e);
    command(0xd212, 0x01);
    command(0xd213, 0x8c);
    command(0xd214, 0x01);
    command(0xd215, 0xbe);
    command(0xd216, 0x02);
    command(0xd217, 0x0b);
    command(0xd218, 0x02);
    command(0xd219, 0x48);
    command(0xd21a, 0x02);
    command(0xd21b, 0x4a);
    command(0xd21c, 0x02);
    command(0xd21d, 0x7e);
    command(0xd21e, 0x02);
    command(0xd21f, 0xbc);
    command(0xd220, 0x02);
    command(0xd221, 0xe1);
    command(0xd222, 0x03);
    command(0xd223, 0x10);
    command(0xd224, 0x03);
    command(0xd225, 0x31);
    command(0xd226, 0x03);
    command(0xd227, 0x5a);
    command(0xd228, 0x03);
    command(0xd229, 0x73);
    command(0xd22a, 0x03);
    command(0xd22b, 0x94);
    command(0xd22c, 0x03);
    command(0xd22d, 0x9f);
    command(0xd22e, 0x03);
    command(0xd22f, 0xb3);
    command(0xd230, 0x03);
    command(0xd231, 0xb9);
    command(0xd232, 0x03);
    command(0xd233, 0xc1);
    // GMBCTR1: Setting Gamma 2.2 Correction for Blue (Positive)
    command(0xd300, 0x00);
    command(0xd301, 0x37);
    command(0xd302, 0x00);
    command(0xd303, 0x52);
    command(0xd304, 0x00);
    command(0xd305, 0x7b);
    command(0xd306, 0x00);
    command(0xd307, 0x99);
    command(0xd308, 0x00);
    command(0xd309, 0xb1);
    command(0xd30a, 0x00);
    command(0xd30b, 0xd2);
    command(0xd30c, 0x00);
    command(0xd30d, 0xf6);
    command(0xd30e, 0x01);
    command(0xd30f, 0x27);
    command(0xd310, 0x01);
    command(0xd311, 0x4e);
    command(0xd312, 0x01);
    command(0xd313, 0x8c);
    command(0xd314, 0x01);
    command(0xd315, 0xbe);
    command(0xd316, 0x02);
    command(0xd317, 0x0b);
    command(0xd318, 0x02);
    command(0xd319, 0x48);
    command(0xd31a, 0x02);
    command(0xd31b, 0x4a);
    command(0xd31c, 0x02);
    command(0xd31d, 0x7e);
    command(0xd31e, 0x02);
    command(0xd31f, 0xbc);
    command(0xd320, 0x02);
    command(0xd321, 0xe1);
    command(0xd322, 0x03);
    command(0xd323, 0x10);
    command(0xd324, 0x03);
    command(0xd325, 0x31);
    command(0xd326, 0x03);
    command(0xd327, 0x5a);
    command(0xd328, 0x03);
    command(0xd329, 0x73);
    command(0xd32a, 0x03);
    command(0xd32b, 0x94);
    command(0xd32c, 0x03);
    command(0xd32d, 0x9f);
    command(0xd32e, 0x03);
    command(0xd32f, 0xb3);
    command(0xd330, 0x03);
    command(0xd331, 0xb9);
    command(0xd332, 0x03);
    command(0xd333, 0xc1);
    // GMRCTR2: Setting Gamma 2.2 Correction for Red (Negative)
    command(0xd400, 0x00);
    command(0xd401, 0x37);
    command(0xd402, 0x00);
    command(0xd403, 0x52);
    command(0xd404, 0x00);
    command(0xd405, 0x7b);
    command(0xd406, 0x00);
    command(0xd407, 0x99);
    command(0xd408, 0x00);
    command(0xd409, 0xb1);
    command(0xd40a, 0x00);
    command(0xd40b, 0xd2);
    command(0xd40c, 0x00);
    command(0xd40d, 0xf6);
    command(0xd40e, 0x01);
    command(0xd40f, 0x27);
    command(0xd410, 0x01);
    command(0xd411, 0x4e);
    command(0xd412, 0x01);
    command(0xd413, 0x8c);
    command(0xd414, 0x01);
    command(0xd415, 0xbe);
    command(0xd416, 0x02);
    command(0xd417, 0x0b);
    command(0xd418, 0x02);
    command(0xd419, 0x48);
    command(0xd41a, 0x02);
    command(0xd41b, 0x4a);
    command(0xd41c, 0x02);
    command(0xd41d, 0x7e);
    command(0xd41e, 0x02);
    command(0xd41f, 0xbc);
    command(0xd420, 0x02);
    command(0xd421, 0xe1);
    command(0xd422, 0x03);
    command(0xd423, 0x10);
    command(0xd424, 0x03);
    command(0xd425, 0x31);
    command(0xd426, 0x03);
    command(0xd427, 0x5a);
    command(0xd428, 0x03);
    command(0xd429, 0x73);
    command(0xd42a, 0x03);
    command(0xd42b, 0x94);
    command(0xd42c, 0x03);
    command(0xd42d, 0x9f);
    command(0xd42e, 0x03);
    command(0xd42f, 0xb3);
    command(0xd430, 0x03);
    command(0xd431, 0xb9);
    command(0xd432, 0x03);
    command(0xd433, 0xc1);
    // GMGCTR2: Setting Gamma 2.2 Correction for Green (Negative)
    command(0xd500, 0x00);
    command(0xd501, 0x37);
    command(0xd502, 0x00);
    command(0xd503, 0x52);
    command(0xd504, 0x00);
    command(0xd505, 0x7b);
    command(0xd506, 0x00);
    command(0xd507, 0x99);
    command(0xd508, 0x00);
    command(0xd509, 0xb1);
    command(0xd50a, 0x00);
    command(0xd50b, 0xd2);
    command(0xd50c, 0x00);
    command(0xd50d, 0xf6);
    command(0xd50e, 0x01);
    command(0xd50f, 0x27);
    command(0xd510, 0x01);
    command(0xd511, 0x4e);
    command(0xd512, 0x01);
    command(0xd513, 0x8c);
    command(0xd514, 0x01);
    command(0xd515, 0xbe);
    command(0xd516, 0x02);
    command(0xd517, 0x0b);
    command(0xd518, 0x02);
    command(0xd519, 0x48);
    command(0xd51a, 0x02);
    command(0xd51b, 0x4a);
    command(0xd51c, 0x02);
    command(0xd51d, 0x7e);
    command(0xd51e, 0x02);
    command(0xd51f, 0xbc);
    command(0xd520, 0x02);
    command(0xd521, 0xe1);
    command(0xd522, 0x03);
    command(0xd523, 0x10);
    command(0xd524, 0x03);
    command(0xd525, 0x31);
    command(0xd526, 0x03);
    command(0xd527, 0x5a);
    command(0xd528, 0x03);
    command(0xd529, 0x73);
    command(0xd52a, 0x03);
    command(0xd52b, 0x94);
    command(0xd52c, 0x03);
    command(0xd52d, 0x9f);
    command(0xd52e, 0x03);
    command(0xd52f, 0xb3);
    command(0xd530, 0x03);
    command(0xd531, 0xb9);
    command(0xd532, 0x03);
    command(0xd533, 0xc1);
    // GMBCTR2: Setting Gamma 2.2 Correction for Blue (Negative)
    command(0xd600, 0x00);
    command(0xd601, 0x37);
    command(0xd602, 0x00);
    command(0xd603, 0x52);
    command(0xd604, 0x00);
    command(0xd605, 0x7b);
    command(0xd606, 0x00);
    command(0xd607, 0x99);
    command(0xd608, 0x00);
    command(0xd609, 0xb1);
    command(0xd60a, 0x00);
    command(0xd60b, 0xd2);
    command(0xd60c, 0x00);
    command(0xd60d, 0xf6);
    command(0xd60e, 0x01);
    command(0xd60f, 0x27);
    command(0xd610, 0x01);
    command(0xd611, 0x4e);
    command(0xd612, 0x01);
    command(0xd613, 0x8c);
    command(0xd614, 0x01);
    command(0xd615, 0xbe);
    command(0xd616, 0x02);
    command(0xd617, 0x0b);
    command(0xd618, 0x02);
    command(0xd619, 0x48);
    command(0xd61a, 0x02);
    command(0xd61b, 0x4a);
    command(0xd61c, 0x02);
    command(0xd61d, 0x7e);
    command(0xd61e, 0x02);
    command(0xd61f, 0xbc);
    command(0xd620, 0x02);
    command(0xd621, 0xe1);
    command(0xd622, 0x03);
    command(0xd623, 0x10);
    command(0xd624, 0x03);
    command(0xd625, 0x31);
    command(0xd626, 0x03);
    command(0xd627, 0x5a);
    command(0xd628, 0x03);
    command(0xd629, 0x73);
    command(0xd62a, 0x03);
    command(0xd62b, 0x94);
    command(0xd62c, 0x03);
    command(0xd62d, 0x9f);
    command(0xd62e, 0x03);
    command(0xd62f, 0xb3);
    command(0xd630, 0x03);
    command(0xd631, 0xb9);
    command(0xd632, 0x03);
    command(0xd633, 0xc1);
    // MAUCCTR: Manufacture Command Set
    command(0xf000, 0x55);
    command(0xf001, 0xaa);
    command(0xf002, 0x52);
    command(0xf003, 0x08); // enable page 0
    command(0xf004, 0x00);
    // RGBCTR: RGB Interface Signals Control
    command(0xb000, 0x08);
    command(0xb001, 0x05);
    command(0xb002, 0x02);
    command(0xb003, 0x05);
    command(0xb004, 0x02);
    // SDHDTCTR: Source Output Data Hold Time Control
    command(0xb600, 0x08);
    // DPRSLCTR: Display Resolution Control
    command(0xb500, 0x50); // 480RGB x 800
    // GSEQCTR: EQ Control Function for Gate Signals
    command(0xb700, 0x00);
    command(0xb701, 0x00);
    // SDEQCTR: EQ Control Function for Source Driver
    command(0xb800, 0x01);
    command(0xb801, 0x05);
    command(0xb802, 0x05);
    command(0xb803, 0x05);
    // INVCTR: Inversion Driving Control
    command(0xbc00, 0x00);
    command(0xbc01, 0x00);
    command(0xbc02, 0x00);
    // unknown
    command(0xcc00, 0x03);
    command(0xcc01, 0x00);
    command(0xcc02, 0x00);
    // DPFRCTR1: Display Timing Control in Normal / Idle Off Mode
    command(0xbd00, 0x01);
    command(0xbd01, 0x84);
    command(0xbd02, 0x07);
    command(0xbd03, 0x31);
    command(0xbd04, 0x00);
    // unknown
    command(0xba00, 0x01);
    // MAUCCTR: Manufacture Command Set
    command(0xff00, 0xaa);
    command(0xff01, 0x55);
    command(0xff02, 0x25);
    command(0xff03, 0x01); // disable
    // TEON: Tearing Effect Line ON
    command(0x3500, 0x00);
    // MADCTL: Memory Data Access Control
    command(0x3600, orientation == Orientation::PORTRAIT ? 0x00 : 0x60);
    // COLMOD: Interface Pixel Format
    command(0x3a00, 0x55); // 16-bit/pixel
    // SLPOUT: Sleep Out
    command(0x1100);
    _delay_ms(120);
    // DISPON: Display On
    command(0x2900);
    // RAMWR: Memory Write
    command(0x2c00);
}

void Display::data(unsigned int d) const
{
    PORTD |= _BV(PD7); // RS=HIGH
    transmit(d);
}

void Display::address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) const
{
    // CASET: Column Address Set
    command(0x2a00);
    data(x1 >> 8);
    command(0x2a01);
    data(x1);
    command(0x2a02);
    data(x2 >> 8);
    command(0x2a03);
    data(x2);
    // RASET: Row Address Set
    command(0x2b00);
    data(y1 >> 8);
    command(0x2b01);
    data(y1);
    command(0x2b02);
    data(y2 >> 8);
    command(0x2b03);
    data(y2);
    // RAMWR: Memory Write
    command(0x2c00);
}

void Display::transmit(unsigned int v) const
{
    PORTA = v >> 8;
    PORTC = v;
    PORTG &= ~_BV(PG2); // WR=LOW
    PORTG |= _BV(PG2); // WR=HIGH
}

void Display::command(unsigned int id) const
{
    PORTD &= ~_BV(PD7); // RS=LOW
    transmit(id);
}

void Display::command(unsigned int id, unsigned int d) const
{
    command(id);
    data(d);
}
